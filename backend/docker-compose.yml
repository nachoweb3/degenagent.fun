version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agent-fun-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./.keys:/app/.keys
      - ./database:/app/database
    depends_on:
      - postgres
      - redis
    networks:
      - agent-fun-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agent-fun-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: agentfun
      POSTGRES_USER: agentfun_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - agent-fun-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentfun_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: agent-fun-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - agent-fun-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx (reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: agent-fun-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - agent-fun-network

volumes:
  postgres-data:
  redis-data:

networks:
  agent-fun-network:
    driver: bridge
